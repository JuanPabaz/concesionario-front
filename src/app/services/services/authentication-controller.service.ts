/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewUser } from '../fn/authentication-controller/add-new-user';
import { AddNewUser$Params } from '../fn/authentication-controller/add-new-user';
import { AuthResponseDto } from '../models/auth-response-dto';
import { getToken } from '../fn/authentication-controller/get-token';
import { GetToken$Params } from '../fn/authentication-controller/get-token';
import { refreshToken } from '../fn/authentication-controller/refresh-token';
import { RefreshToken$Params } from '../fn/authentication-controller/refresh-token';
import { UsuarioResponseDto } from '../models/usuario-response-dto';
import { validateToken } from '../fn/authentication-controller/validate-token';
import { ValidateToken$Params } from '../fn/authentication-controller/validate-token';

@Injectable({ providedIn: 'root' })
export class AuthenticationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addNewUser()` */
  static readonly AddNewUserPath = '/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewUser$Response(params: AddNewUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UsuarioResponseDto>> {
    return addNewUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewUser(params: AddNewUser$Params, context?: HttpContext): Observable<UsuarioResponseDto> {
    return this.addNewUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsuarioResponseDto>): UsuarioResponseDto => r.body)
    );
  }

  /** Path part for operation `refreshToken()` */
  static readonly RefreshTokenPath = '/auth/refreshToken';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refreshToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken$Response(params: RefreshToken$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponseDto>> {
    return refreshToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refreshToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken(params: RefreshToken$Params, context?: HttpContext): Observable<AuthResponseDto> {
    return this.refreshToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponseDto>): AuthResponseDto => r.body)
    );
  }

  /** Path part for operation `getToken()` */
  static readonly GetTokenPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getToken$Response(params: GetToken$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponseDto>> {
    return getToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getToken(params: GetToken$Params, context?: HttpContext): Observable<AuthResponseDto> {
    return this.getToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponseDto>): AuthResponseDto => r.body)
    );
  }

  /** Path part for operation `validateToken()` */
  static readonly ValidateTokenPath = '/auth/validateToken/{token}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateToken$Response(params: ValidateToken$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return validateToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateToken(params: ValidateToken$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.validateToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

}
