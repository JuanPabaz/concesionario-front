/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { actualizarVehiculo } from '../fn/vehiculo-controller/actualizar-vehiculo';
import { ActualizarVehiculo$Params } from '../fn/vehiculo-controller/actualizar-vehiculo';
import { crearVehiculo } from '../fn/vehiculo-controller/crear-vehiculo';
import { CrearVehiculo$Params } from '../fn/vehiculo-controller/crear-vehiculo';
import { eliminarVehiculo } from '../fn/vehiculo-controller/eliminar-vehiculo';
import { EliminarVehiculo$Params } from '../fn/vehiculo-controller/eliminar-vehiculo';
import { listarVehiculos } from '../fn/vehiculo-controller/listar-vehiculos';
import { ListarVehiculos$Params } from '../fn/vehiculo-controller/listar-vehiculos';
import { VehiculoDto } from '../models/vehiculo-dto';

@Injectable({ providedIn: 'root' })
export class VehiculoControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `actualizarVehiculo()` */
  static readonly ActualizarVehiculoPath = '/vehiculo/{id_vehiculo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarVehiculo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actualizarVehiculo$Response(params: ActualizarVehiculo$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return actualizarVehiculo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarVehiculo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actualizarVehiculo(params: ActualizarVehiculo$Params, context?: HttpContext): Observable<{
}> {
    return this.actualizarVehiculo$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `eliminarVehiculo()` */
  static readonly EliminarVehiculoPath = '/vehiculo/{id_vehiculo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `eliminarVehiculo()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarVehiculo$Response(params: EliminarVehiculo$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return eliminarVehiculo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `eliminarVehiculo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarVehiculo(params: EliminarVehiculo$Params, context?: HttpContext): Observable<{
}> {
    return this.eliminarVehiculo$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `listarVehiculos()` */
  static readonly ListarVehiculosPath = '/vehiculo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listarVehiculos()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarVehiculos$Response(params?: ListarVehiculos$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<VehiculoDto>>> {
    return listarVehiculos(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listarVehiculos$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarVehiculos(params?: ListarVehiculos$Params, context?: HttpContext): Observable<Array<VehiculoDto>> {
    return this.listarVehiculos$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<VehiculoDto>>): Array<VehiculoDto> => r.body)
    );
  }

  /** Path part for operation `crearVehiculo()` */
  static readonly CrearVehiculoPath = '/vehiculo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearVehiculo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearVehiculo$Response(params: CrearVehiculo$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return crearVehiculo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearVehiculo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearVehiculo(params: CrearVehiculo$Params, context?: HttpContext): Observable<{
}> {
    return this.crearVehiculo$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
