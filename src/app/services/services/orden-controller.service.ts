/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { actualizarOrden } from '../fn/orden-controller/actualizar-orden';
import { ActualizarOrden$Params } from '../fn/orden-controller/actualizar-orden';
import { crearOrden } from '../fn/orden-controller/crear-orden';
import { CrearOrden$Params } from '../fn/orden-controller/crear-orden';
import { eliminarOrden } from '../fn/orden-controller/eliminar-orden';
import { EliminarOrden$Params } from '../fn/orden-controller/eliminar-orden';
import { listarOrdenes } from '../fn/orden-controller/listar-ordenes';
import { ListarOrdenes$Params } from '../fn/orden-controller/listar-ordenes';
import { OrdenDto } from '../models/orden-dto';

@Injectable({ providedIn: 'root' })
export class OrdenControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `actualizarOrden()` */
  static readonly ActualizarOrdenPath = '/orden/{id_orden}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarOrden()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actualizarOrden$Response(params: ActualizarOrden$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return actualizarOrden(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarOrden$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actualizarOrden(params: ActualizarOrden$Params, context?: HttpContext): Observable<{
}> {
    return this.actualizarOrden$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `eliminarOrden()` */
  static readonly EliminarOrdenPath = '/orden/{id_orden}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `eliminarOrden()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarOrden$Response(params: EliminarOrden$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return eliminarOrden(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `eliminarOrden$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarOrden(params: EliminarOrden$Params, context?: HttpContext): Observable<{
}> {
    return this.eliminarOrden$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `listarOrdenes()` */
  static readonly ListarOrdenesPath = '/orden';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listarOrdenes()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarOrdenes$Response(params?: ListarOrdenes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrdenDto>>> {
    return listarOrdenes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listarOrdenes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarOrdenes(params?: ListarOrdenes$Params, context?: HttpContext): Observable<Array<OrdenDto>> {
    return this.listarOrdenes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrdenDto>>): Array<OrdenDto> => r.body)
    );
  }

  /** Path part for operation `crearOrden()` */
  static readonly CrearOrdenPath = '/orden';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearOrden()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearOrden$Response(params: CrearOrden$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return crearOrden(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearOrden$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearOrden(params: CrearOrden$Params, context?: HttpContext): Observable<{
}> {
    return this.crearOrden$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
